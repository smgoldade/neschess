/**
 * @author Steven Goldade
 * @date 11/25/2023
 */
#pragma once
#include <nespp/types.h>

namespace chess::Evaluator {
    static constexpr u8 PIECE_PHASE_VALUE[] = {0, 0, 1, 1, 2, 4, 0};
    static constexpr s16 MIDGAME_PIECE_VALUE[] = {0, 82, 337, 365, 477, 1025, 0};
    static constexpr s16 ENDGAME_PIECE_VALUE[] = {0, 94, 281, 297, 512, 936, 0};

    static constexpr s16 MIDGAME_PAWN_VALUE[] = {
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        98,
        134,
        61,
        95,
        68,
        126,
        34,
        -11,
        -6,
        7,
        26,
        31,
        65,
        56,
        25,
        -20,
        -14,
        13,
        6,
        21,
        23,
        12,
        17,
        -23,
        -27,
        -2,
        -5,
        12,
        17,
        6,
        10,
        -25,
        -26,
        -4,
        -4,
        -10,
        3,
        3,
        33,
        -12,
        -35,
        -1,
        -20,
        -23,
        -15,
        24,
        38,
        -22,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    };
    static constexpr s16 ENDGAME_PAWN_VALUE[] = {
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        178,
        173,
        158,
        134,
        147,
        132,
        165,
        187,
        94,
        100,
        85,
        67,
        56,
        53,
        82,
        84,
        32,
        24,
        13,
        5,
        -2,
        4,
        17,
        17,
        13,
        9,
        -3,
        -7,
        -7,
        -8,
        3,
        -1,
        4,
        7,
        -6,
        1,
        0,
        -5,
        -1,
        -8,
        13,
        8,
        8,
        10,
        13,
        0,
        2,
        -7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    };
    static constexpr s16 MIDGAME_KNIGHT_VALUE[] = {
        -167,
        -89,
        -34,
        -49,
        61,
        -97,
        -15,
        -107,
        -73,
        -41,
        72,
        36,
        23,
        62,
        7,
        -17,
        -47,
        60,
        37,
        65,
        84,
        129,
        73,
        44,
        -9,
        17,
        19,
        53,
        37,
        69,
        18,
        22,
        -13,
        4,
        16,
        13,
        28,
        19,
        21,
        -8,
        -23,
        -9,
        12,
        10,
        19,
        17,
        25,
        -16,
        -29,
        -53,
        -12,
        -3,
        -1,
        18,
        -14,
        -19,
        -105,
        -21,
        -58,
        -33,
        -17,
        -28,
        -19,
        -23,
    };
    static constexpr s16 ENDGAME_KNIGHT_VALUE[] = {
        -58,
        -38,
        -13,
        -28,
        -31,
        -27,
        -63,
        -99,
        -25,
        -8,
        -25,
        -2,
        -9,
        -25,
        -24,
        -52,
        -24,
        -20,
        10,
        9,
        -1,
        -9,
        -19,
        -41,
        -17,
        3,
        22,
        22,
        22,
        11,
        8,
        -18,
        -18,
        -6,
        16,
        25,
        16,
        17,
        4,
        -18,
        -23,
        -3,
        -1,
        15,
        10,
        -3,
        -20,
        -22,
        -42,
        -20,
        -10,
        -5,
        -2,
        -20,
        -23,
        -44,
        -29,
        -51,
        -23,
        -15,
        -22,
        -18,
        -50,
        -64,
    };
    static constexpr s16 MIDGAME_BISHOP_VALUE[] = {
        -29,
        4,
        -82,
        -37,
        -25,
        -42,
        7,
        -8,
        -26,
        16,
        -18,
        -13,
        30,
        59,
        18,
        -47,
        -16,
        37,
        43,
        40,
        35,
        50,
        37,
        -2,
        -4,
        5,
        19,
        50,
        37,
        37,
        7,
        -2,
        -6,
        13,
        13,
        26,
        34,
        12,
        10,
        4,
        0,
        15,
        15,
        15,
        14,
        27,
        18,
        10,
        4,
        15,
        16,
        0,
        7,
        21,
        33,
        1,
        -33,
        -3,
        -14,
        -21,
        -13,
        -12,
        -39,
        -21,
    };
    static constexpr s16 ENDGAME_BISHOP_VALUE[] = {
        -14,
        -21,
        -11,
        -8,
        -7,
        -9,
        -17,
        -24,
        -8,
        -4,
        7,
        -12,
        -3,
        -13,
        -4,
        -14,
        2,
        -8,
        0,
        -1,
        -2,
        6,
        0,
        4,
        -3,
        9,
        12,
        9,
        14,
        10,
        3,
        2,
        -6,
        3,
        13,
        19,
        7,
        10,
        -3,
        -9,
        -12,
        -3,
        8,
        10,
        13,
        3,
        -7,
        -15,
        -14,
        -18,
        -7,
        -1,
        4,
        -9,
        -15,
        -27,
        -23,
        -9,
        -23,
        -5,
        -9,
        -16,
        -5,
        -17,
    };
    static constexpr s16 MIDGAME_ROOK_VALUE[] = {
        32,
        42,
        32,
        51,
        63,
        9,
        31,
        43,
        27,
        32,
        58,
        62,
        80,
        67,
        26,
        44,
        -5,
        19,
        26,
        36,
        17,
        45,
        61,
        16,
        -24,
        -11,
        7,
        26,
        24,
        35,
        -8,
        -20,
        -36,
        -26,
        -12,
        -1,
        9,
        -7,
        6,
        -23,
        -45,
        -25,
        -16,
        -17,
        3,
        0,
        -5,
        -33,
        -44,
        -16,
        -20,
        -9,
        -1,
        11,
        -6,
        -71,
        -19,
        -13,
        1,
        17,
        16,
        7,
        -37,
        -26,
    };
    static constexpr s16 ENDGAME_ROOK_VALUE[] = {
        13,
        10,
        18,
        15,
        12,
        12,
        8,
        5,
        11,
        13,
        13,
        11,
        -3,
        3,
        8,
        3,
        7,
        7,
        7,
        5,
        4,
        -3,
        -5,
        -3,
        4,
        3,
        13,
        1,
        2,
        1,
        -1,
        2,
        3,
        5,
        8,
        4,
        -5,
        -6,
        -8,
        -11,
        -4,
        0,
        -5,
        -1,
        -7,
        -12,
        -8,
        -16,
        -6,
        -6,
        0,
        2,
        -9,
        -9,
        -11,
        -3,
        -9,
        2,
        3,
        -1,
        -5,
        -13,
        4,
        -20,
    };
    static constexpr s16 MIDGAME_QUEEN_VALUE[] = {
        -28,
        0,
        29,
        12,
        59,
        44,
        43,
        45,
        -24,
        -39,
        -5,
        1,
        -16,
        57,
        28,
        54,
        -13,
        -17,
        7,
        8,
        29,
        56,
        47,
        57,
        -27,
        -27,
        -16,
        -16,
        -1,
        17,
        -2,
        1,
        -9,
        -26,
        -9,
        -10,
        -2,
        -4,
        3,
        -3,
        -14,
        2,
        -11,
        -2,
        -5,
        2,
        14,
        5,
        -35,
        -8,
        11,
        2,
        8,
        15,
        -3,
        1,
        -1,
        -18,
        -9,
        10,
        -15,
        -25,
        -31,
        -50,
    };
    static constexpr s16 ENDGAME_QUEEN_VALUE[] = {
        -9,
        22,
        22,
        27,
        27,
        19,
        10,
        20,
        -17,
        20,
        32,
        41,
        58,
        25,
        30,
        0,
        -20,
        6,
        9,
        49,
        47,
        35,
        19,
        9,
        3,
        22,
        24,
        45,
        57,
        40,
        57,
        36,
        -18,
        28,
        19,
        47,
        31,
        34,
        39,
        23,
        -16,
        -27,
        15,
        6,
        9,
        17,
        10,
        5,
        -22,
        -23,
        -30,
        -16,
        -16,
        -23,
        -36,
        -32,
        -33,
        -28,
        -22,
        -43,
        -5,
        -32,
        -20,
        -41,
    };
    static constexpr s16 MIDGAME_KING_VALUE[] = {
        -65,
        23,
        16,
        -15,
        -56,
        -34,
        2,
        13,
        29,
        -1,
        -20,
        -7,
        -8,
        -4,
        -38,
        -29,
        -9,
        24,
        2,
        -16,
        -20,
        6,
        22,
        -22,
        -17,
        -20,
        -12,
        -27,
        -30,
        -25,
        -14,
        -36,
        -49,
        -1,
        -27,
        -39,
        -46,
        -44,
        -33,
        -51,
        -14,
        -14,
        -22,
        -46,
        -44,
        -30,
        -15,
        -27,
        1,
        7,
        -8,
        -64,
        -43,
        -16,
        9,
        8,
        -15,
        36,
        12,
        -54,
        8,
        -28,
        24,
        14,
    };
    static constexpr s16 ENDGAME_KING_VALUE[] = {
        -74, -35, -18, -18, -11, 15, 4, -17,
        -12, 17, 14, 17, 17, 38, 23, 11,
        10, 17, 23, 15, 20, 45, 44, 13,
        -8, 22, 24, 27, 26, 33, 26, 3,
        -18, -4, 21, 24, 27, 23, 9, -11,
        -19, -3, 11, 21, 23, 16, 7, -9,
        -27, -11, 4, 13, 14, 4, -5, -17,
        -53, -34, -21, -11, -28, -14, -24, -43};

    static constexpr const s16* MIDGAME[] = {
        MIDGAME_PAWN_VALUE,
        MIDGAME_PAWN_VALUE,
        MIDGAME_KNIGHT_VALUE,
        MIDGAME_BISHOP_VALUE,
        MIDGAME_ROOK_VALUE,
        MIDGAME_QUEEN_VALUE,
        MIDGAME_KING_VALUE};

    static constexpr const s16* ENDGAME[] = {
        ENDGAME_PAWN_VALUE,
        ENDGAME_PAWN_VALUE,
        ENDGAME_KNIGHT_VALUE,
        ENDGAME_BISHOP_VALUE,
        ENDGAME_ROOK_VALUE,
        ENDGAME_QUEEN_VALUE,
        ENDGAME_KING_VALUE};

    auto constexpr phase(const Board& board) noexcept -> u8 {
        u8 phase = 0;

        auto const add_phase_for_side = [&](const Side side) -> void {
            for(auto& piece : board.get_pieces(side)) {
                if(!piece.square().is_valid()) continue;
                auto const piece_index = static_cast<u8>(piece.piece_type().basic_piece_type());
                phase += PIECE_PHASE_VALUE[piece_index];
            }
        };
        add_phase_for_side(Side::WHITE);
        add_phase_for_side(Side::BLACK);
        return phase;
    }

    [[nodiscard]] auto constexpr evaluate(const Board& board, const Side side_to_move) noexcept -> s16 {
        s16 mg[] = {0, 0};
        s16 eg[] = {0, 0};
        u8 phase = 0;

        for(auto& piece : board.get_pieces(Side::WHITE)) {
            if(!piece.square().is_valid()) continue;
            auto const piece_index = static_cast<u8>(piece.piece_type().basic_piece_type());
            auto const square_index = piece.square().as_8x8_square_index() ^ 56;
            mg[0] = static_cast<s16>(mg[0] + MIDGAME[piece_index][square_index] + MIDGAME_PIECE_VALUE[piece_index]);
            eg[0] = static_cast<s16>(eg[0] + ENDGAME[piece_index][square_index] + ENDGAME_PIECE_VALUE[piece_index]);
            phase += PIECE_PHASE_VALUE[piece_index];
        }
        for(auto& piece : board.get_pieces(Side::BLACK)) {
            if(!piece.square().is_valid()) continue;
            auto const piece_index = static_cast<u8>(piece.piece_type().basic_piece_type());
            auto const square_index = piece.square().as_8x8_square_index();
            mg[1] = static_cast<s16>(mg[1] + MIDGAME[piece_index][square_index] + MIDGAME_PIECE_VALUE[piece_index]);
            eg[1] = static_cast<s16>(eg[1] + ENDGAME[piece_index][square_index] + ENDGAME_PIECE_VALUE[piece_index]);
            phase += PIECE_PHASE_VALUE[piece_index];
        }

        auto const side = side_to_move == Side::WHITE ? 0 : 1;
        s32 midgame = static_cast<s32>(mg[side] - mg[side ^ 1]);
        s32 endgame = static_cast<s32>(eg[side] - eg[side ^ 1]);

        if(phase > 24) phase = 24;
        return static_cast<s16>((midgame * phase + endgame * (24 - phase)) / 24);
    }

    auto constexpr evaluate_move(const Board& board, const Move& move) noexcept -> s16 {
        u8 move_phase = phase(board);
        s16 mg_change = 0;
        s16 eg_change = 0;

        auto const from_square = move.from_square();
        auto const to_square = move.to_square();
        auto const from_piece = board.piece_at(from_square);
        auto const white = from_piece.is_white();

        auto const piece_index = static_cast<u8>(from_piece.piece_type().basic_piece_type());
        auto const end_piece_index = move.is_promotion() ? static_cast<u8>(move.promote_piece_type()) : piece_index;
        auto const from_square_index = from_square.as_8x8_square_index() ^ (white ? 56 : 0);
        auto const to_square_index = to_square.as_8x8_square_index() ^ (white ? 56 : 0);

        mg_change = static_cast<s16>(mg_change + MIDGAME[end_piece_index][to_square_index] - MIDGAME[piece_index][from_square_index]);
        eg_change = static_cast<s16>(eg_change + ENDGAME[end_piece_index][to_square_index] - ENDGAME[piece_index][from_square_index]);

        if(move.is_promotion()) {
            move_phase += PIECE_PHASE_VALUE[end_piece_index];
            mg_change = static_cast<s16>(mg_change + MIDGAME_PIECE_VALUE[end_piece_index] - MIDGAME_PIECE_VALUE[static_cast<u8>(BasicPieceType::PAWN)]);
            eg_change = static_cast<s16>(eg_change + ENDGAME_PIECE_VALUE[end_piece_index] - ENDGAME_PIECE_VALUE[static_cast<u8>(BasicPieceType::PAWN)]);
        }

        if(move.is_capture()) {
            auto const to_piece = board.piece_at(move.is_en_passant() ? move.en_passant_square() : to_square);
            auto const to_white = to_piece.is_white();
            auto const to_piece_index = static_cast<u8>(to_piece.piece_type().basic_piece_type());
            auto const to_piece_square_index = to_piece.square().as_8x8_square_index() ^ (to_white ? 56 : 0);

            mg_change = static_cast<s16>(mg_change + MIDGAME[to_piece_index][to_piece_square_index] + MIDGAME_PIECE_VALUE[to_piece_index]);
            eg_change = static_cast<s16>(eg_change + ENDGAME[to_piece_index][to_piece_square_index] + ENDGAME_PIECE_VALUE[to_piece_index]);
            move_phase -= PIECE_PHASE_VALUE[to_piece_index];
        }

        if(move.is_king_side_castle()) {
            mg_change = static_cast<s16>(mg_change + MIDGAME[static_cast<u8>(BasicPieceType::ROOK)][Square::F1 ^ 56] - MIDGAME[static_cast<u8>(BasicPieceType::ROOK)][Square::H1 ^ 56]);
            eg_change = static_cast<s16>(eg_change + ENDGAME[static_cast<u8>(BasicPieceType::ROOK)][Square::F1 ^ 56] - ENDGAME[static_cast<u8>(BasicPieceType::ROOK)][Square::H1 ^ 56]);
        }
        if(move.is_queen_side_castle()) {
            mg_change = static_cast<s16>(mg_change + MIDGAME[static_cast<u8>(BasicPieceType::ROOK)][Square::D1 ^ 56] - MIDGAME[static_cast<u8>(BasicPieceType::ROOK)][Square::A1 ^ 56]);
            eg_change = static_cast<s16>(eg_change + ENDGAME[static_cast<u8>(BasicPieceType::ROOK)][Square::D1 ^ 56] - ENDGAME[static_cast<u8>(BasicPieceType::ROOK)][Square::A1 ^ 56]);
        }

        if(move_phase > 24) move_phase = 24;
        return static_cast<s16>((mg_change * move_phase + eg_change * (24 - move_phase)) / 24);
    }
}// namespace chess::Evaluator
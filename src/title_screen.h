/**
 * @author Steven Goldade
 * @date 11/7/2023
 */
#pragma once
#include "neschess.h"
#include "nespp/include/nespp/types.h"
#include "screen_fader.h"
#include <nespp/ppu.h>

class TitleScreen {
public:
    constexpr TitleScreen() noexcept : state(State::INIT), cursor_position(CursorPosition::SIDE), screen_fader(FADE_DELAY, PAL0, PAL1, PAL2, FINAL_PALETTE) {}
    
    auto constexpr run() noexcept -> void {
        switch(state) {
            case State::INIT:
                init();
                break;
            case State::FADE_IN:
                fade_in();
                break;
            case State::RUNNING:
                running();
                break;
            case State::FADE_OUT:
                fade_out();
                break;
            case State::OFF_SCREEN:
                NESChess::transition_state(GameState::IN_GAME);
                state = State::INIT;
                break;
        }
    }
    
    auto init() noexcept -> void;
    auto fade_in() noexcept -> void;
    auto running() noexcept -> void;
    auto fade_out() noexcept -> void;
private:
    static constexpr u8 TITLE_SCREEN[] = {
        0x9F,0x01,0x9F,0x17,0x02,0x03,0x01,0x9F,0x1C,0x04,0x05,0x06,0x07,0x01,0x9F,0x1C,
        0x08,0x09,0x01,0x9F,0x1A,0x0A,0x0B,0x0C,0x00,0x0D,0x0E,0x0F,0x10,0x01,0x9F,0x06,
        0x6F,0x9F,0x0D,0x01,0x9F,0x02,0x11,0x00,0x9F,0x04,0x12,0x13,0x01,0x9F,0x02,0x14,
        0x14,0x15,0x14,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1A,0x14,0x1C,0x1D,0x1E,0x14,0x9F,
        0x05,0x1F,0x00,0x9F,0x04,0x20,0x21,0x14,0x14,0x22,0x23,0x23,0x24,0x25,0x26,0x27,
        0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
        0x00,0x9F,0x05,0x38,0x23,0x23,0x39,0x23,0x23,0x24,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,
        0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x00,0x9F,0x04,
        0x4D,0x4E,0x23,0x23,0x4F,0x23,0x23,0x24,0x50,0x23,0x51,0x52,0x53,0x54,0x55,0x56,
        0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x00,0x9F,0x04,0x62,0x23,
        0x9F,0x02,0x63,0x23,0x23,0x64,0x65,0x9F,0x06,0x66,0x67,0x9F,0x02,0x68,0x65,0x9F,
        0x05,0x69,0x00,0x9F,0x04,0x62,0x23,0x9F,0x02,0x6A,0x6B,0x9F,0x14,0x6C,0x00,0x9F,
        0x04,0x6D,0x6B,0x9F,0x02,0x6E,0x6F,0x9F,0x14,0x70,0x00,0x9F,0x04,0x71,0x6F,0x9F,
        0x02,0x72,0x6F,0x9F,0x02,0x73,0x74,0x74,0x75,0x76,0x74,0x77,0x78,0x6F,0x9F,0x09,
        0x70,0x00,0x9F,0x04,0x71,0x6F,0x9F,0x02,0x79,0x6F,0x6F,0x7A,0x7B,0x8D,0x8E,0x7C,
        0x8F,0x90,0x91,0x7D,0x6F,0x9F,0x09,0x70,0x00,0x9F,0x04,0x71,0x6F,0x6F,0x7E,0x7F,
        0x6F,0x9F,0x02,0x80,0x81,0x81,0x82,0x81,0x81,0x83,0x6F,0x9F,0x0A,0x70,0x00,0x9F,
        0x04,0x71,0x6F,0x6F,0x84,0x01,0x6F,0x9F,0x14,0x70,0x00,0x9F,0x04,0x71,0x6F,0x6F,
        0x85,0x01,0x86,0x9F,0x14,0x87,0x00,0x9F,0x04,0x88,0x86,0x86,0x01,0x9F,0x15,0x02,
        0x00,0x9F,0x06,0x89,0x03,0x01,0x9F,0x15,0x08,0x00,0x9F,0x07,0x09,0x01,0x9F,0x15,
        0x8A,0x8B,0x9F,0x07,0x8C,0x01,0x9F,0x0F,0x9A,0x93,0x9B,0x9C,0x01,0x9F,0x1B,0x6F,
        0x9F,0x03,0x01,0x9F,0x17,0x6F,0x9F,0x0B,0x01,0x9F,0x13,0x6F,0x92,0x93,0x94,0x94,
        0x93,0x95,0x96,0x97,0x98,0x99,0x6F,0x01,0x9F,0x57,0x9E,0x97,0x9D,0x99,0x01,0x9F,
        0x1B,0x6F,0x9F,0x03,0x01,0x9F,0x4D,0x00,0x9F,0x07,0x40,0x55,0x9F,0x02,0x51,0x10,
        0x00,0x00,0x04,0x05,0x9F,0x03,0x01,0x00,0x00,0x08,0x0A,0x02,0x00,0x9F,0x0E,0xC0,
        0xFC,0xF3,0x30,0x00,0x9F,0x04,0xC0,0x30,0x00,0x9F,0x09,0x00,0x9F,0x00
    };
    static constexpr nespp::Palette FINAL_PALETTE = {
        nespp::Color::BLACK,
        {nespp::Color::MEDIUM_GRAY, nespp::Color::DARK_GRAY, nespp::Color::WHITE},
        nespp::Color::BLACK,
        {nespp::Color::MEDIUM_RED, nespp::Color::MEDIUM_GRAY, nespp::Color::WHITE},
        nespp::Color::BLACK,
        {nespp::Color::LIGHT_RED, nespp::Color::DARK_GRAY, nespp::Color::DARK_RED},
        nespp::Color::BLACK,
        {nespp::Color::DARK_RED, nespp::Color::MEDIUM_GRAY, nespp::Color::WHITE}
    };
    static constexpr nespp::Palette PAL2 = FINAL_PALETTE.darken();
    static constexpr nespp::Palette PAL1 = PAL2.darken();
    static constexpr nespp::Palette PAL0 = PAL1.darken();
    static constexpr nespp::Palette SPRITE_PALETTE = {
        nespp::Color::BLACK,
        {nespp::Color::BLACK, nespp::Color::DARK_GRAY, nespp::Color::MEDIUM_GRAY},
        nespp::Color::BLACK,
        {nespp::Color::WHITE, nespp::Color::MEDIUM_GRAY, nespp::Color::WHITE},
        nespp::Color::BLACK,
        {nespp::Color::DARK_RED, nespp::Color::MEDIUM_RED, nespp::Color::LIGHT_RED},
        nespp::Color::BLACK,
        {nespp::Color::DARK_GREEN, nespp::Color::MEDIUM_GREEN, nespp::Color::LIGHT_GREEN}
    };
    
    static constexpr u8 FADE_DELAY = 5;
    
    enum class State {
        INIT,
        FADE_IN,
        RUNNING,
        FADE_OUT,
        OFF_SCREEN
    };
    enum class CursorPosition {
        SIDE,
        DIFFICULTY,
        PLAY
    };
    
    State state;
    CursorPosition cursor_position;
    ScreenFader screen_fader;

    nespp::PpuSprite& side_sprite = nespp::Ppu::sprites[0];
    nespp::PpuSprite& difficulty_sprite = nespp::Ppu::sprites[1];
    nespp::PpuSprite& left_cursor_sprite = nespp::Ppu::sprites[2];
    nespp::PpuSprite& right_cursor_sprite = nespp::Ppu::sprites[3];
};